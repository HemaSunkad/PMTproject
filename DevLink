#!/bin/bash

# Create folders
mkdir -p devlink/backend/{routes,models,middleware} devlink/frontend/src/{components,pages}
cd devlink

# ----- Backend -----
cat > backend/package.json <<EOF
{
  "name": "devlink-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.0.3"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}
EOF

cat > backend/server.js <<EOF
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

const authRoutes = require('./routes/auth');
app.use('/api/auth', authRoutes);

mongoose.connect(process.env.MONGO_URI)
  .then(() => app.listen(process.env.PORT, () => console.log('Server started')))
  .catch((err) => console.error(err));
EOF

cat > backend/.env.example <<EOF
MONGO_URI=mongodb://localhost:27017/devlink
JWT_SECRET=your_jwt_secret
PORT=5000
EOF

cat > backend/models/User.js <<EOF
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

module.exports = mongoose.model('User', userSchema);
EOF

cat > backend/routes/auth.js <<EOF
const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/User');

router.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const hash = await bcrypt.hash(password, 10);
    const user = new User({ username, email, password: hash });
    await user.save();
    res.status(201).json({ message: 'User registered' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password)))
      return res.status(401).json({ error: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
    res.json({ token, user: { username: user.username, email: user.email } });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
EOF

# ----- Frontend -----
cat > frontend/package.json <<EOF
{
  "name": "devlink-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "axios": "^1.3.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start"
  }
}
EOF

cat > frontend/src/index.js <<EOF
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
EOF

cat > frontend/src/App.js <<EOF
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const login = async () => {
    try {
      const res = await axios.post('http://localhost:5000/api/auth/login', { email, password });
      alert(\`Welcome \${res.data.user.username}\`);
    } catch (err) {
      alert('Login failed');
    }
  };

  return (
    <div style={{ padding: '50px' }}>
      <h2>DevLink Login</h2>
      <input placeholder="Email" onChange={(e) => setEmail(e.target.value)} /><br />
      <input placeholder="Password" type="password" onChange={(e) => setPassword(e.target.value)} /><br />
      <button onClick={login}>Login</button>
    </div>
  );
}

export default App;
EOF

# ----- Docker -----
cat > docker-compose.yml <<EOF
version: '3'
services:
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - MONGO_URI=mongodb://mongo:27017/devlink
      - JWT_SECRET=supersecret
      - PORT=5000
    depends_on:
      - mongo

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app

  mongo:
    image: mongo
    ports:
      - "27017:27017"
EOF

# ----- .gitignore -----
cat > .gitignore <<EOF
node_modules
.env
.env.local
build
EOF

# ----- README.md -----
cat > README.md <<EOF
# DevLink

DevLink is a developer social platform to share portfolios and connect with other developers.

## Features
- User Registration/Login (JWT)
- MongoDB Backend
- React Frontend
- Dockerized with docker-compose

## Getting Started

### Backend
\`\`\`
cd backend
cp .env.example .env
npm install
npm run dev
\`\`\`

### Frontend
\`\`\`
cd frontend
npm install
npm start
\`\`\`

### Docker
\`\`\`
docker-compose up --build
\`\`\`

---
EOF

echo "âœ… DevLink project structure created!"
